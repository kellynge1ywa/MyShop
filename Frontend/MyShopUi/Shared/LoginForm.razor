@page "/login"
@inject HttpClient _Http
@inject NavigationManager _Navigation
<div>
   <EditForm Model="login" OnValidSubmit="LoginUser">
    <h2>Please login</h2>
    <DataAnnotationsValidator/>
    
    <div>
        <label for="email">Email Address</label>
        <InputText id="email" @bind-Value="login.Email"></InputText>
        <ValidationMessage style="color:red ;" For="@(()=>login.Email)"></ValidationMessage>
    </div>
    <div>
        <label for="password">Password</label>
        <InputText id="password" type="password" aria-placeholder="password" @bind-Value="login.Password" ></InputText>
        <ValidationMessage style="color:red ;" For="@(()=>login.Password)"></ValidationMessage>
    </div>
    <button type="submit">Login</button>
    <div class="regNav">
        <span>Don't have an account? </span> <li @onclick="GoToRegister" class="goToRegister">Create account</li>

    </div>
   </EditForm>

</div> 

@code {
    public List<User> users= new List<User>();
    public LoginUser login =new LoginUser();

    public void clear(){
        login=new LoginUser();
    }
    
    protected override async Task OnInitializedAsync()
    {
        var allusers=await  _Http.GetFromJsonAsync<List<User>>("Data/Users.json");
        if(allusers.Any()){
            users=allusers;

        }    
    }

    public void LoginUser(){
        var userEmail= users.Find(user=>user.Email==login.Email);
        if(userEmail==null){
            Console.WriteLine("Invalid email!!");
            return;
            
        }
        var userPassword= users.Find(users => users.Password==login.Password);
        if(userPassword==null){
            Console.WriteLine("Invalid password");
            return;
        }
        Console.WriteLine($"Hello {login.Email} you've logged in successfully!!");
        _Navigation.NavigateTo("/products");

    }

    private void GoToRegister(){
        _Navigation.NavigateTo("/register");
    }

}
